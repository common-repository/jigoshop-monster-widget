<?php
/*
Plugin Name:       Jigoshop Monster Widget
Description:       A widget that allows for quick and easy testing of multiple jigoshop widgets. Suggested for Jigoshop Developers and not intended for production use.
Version:           1.0.0
Author:            N. Venkat Raj
Author URI:        http://www.webulous.in/
License:           GPLv2 or later
*/

/**
 * Register the Jigoshop Monster Widget.
 *
 * Hooks into the widgets_init action.
 *
 * @since 0.1
 */
function register_jigoshop_monster_widget() {
	register_widget( 'Jigoshop_Monster_Widget' );
}
add_action( 'widgets_init', 'register_jigoshop_monster_widget' );

/**
 * Jigoshop Monster Widget.
 *
 * A widget that allows for quick and easy testing of multiple jigoshop widgets.
 *
 * @todo Figure out a way to automatically register a nav menu widget.
 * @todo Find a substitute image to use in breaker text.
 *
 * @since 0.1
 */
class Jigoshop_Monster_Widget extends WP_Widget {

	/**
	 * Iterator (int).
	 *
	 * Used to set a unique html id attribute for each
	 * widget instance generated by Monster_Widget::widget().
	 *
	 * @since 0.1
	 */
	static $iterator = 1;

	/**
	 * Constructor.
	 *
	 * @since 0.1
	 */
	public function __construct() {
		parent::__construct( 'jigoshop-monster', __( 'Jigoshop Monster Widget', 'jigoshop-monster-widget' ), array(
			'classname'   => 'jigoshop_monster',
			'description' => __( 'Test multiple jigoshop widgets at the same time.', 'jigoshop-monster-widget' )
		) );
	}

	/**
	 * Print the Monster widget on the front-end.
	 *
	 * @uses $wp_registered_sidebars
	 * @uses Monster_Widget::$iterator
	 * @uses Monster_Widget::get_widget_class()
	 * @uses $this->get_widget_config()
	 *
	 * @since 0.1
	 */
	public function widget( $args, $instance ) {
		global $wp_registered_sidebars;

		$id = $args['id'];		
		$args = $wp_registered_sidebars[$id];
		$before_widget = $args['before_widget'];

		foreach( $this->get_widget_config() as $widget ) {
			$_instance = ( isset( $widget[1] ) ) ? $widget[1] : null;

			$args['before_widget'] = sprintf(
				$before_widget,
				'monster-widget-placeholder-' . self::$iterator,
				$this->get_widget_class( $widget[0] )
			);

			the_widget( $widget[0], $_instance, $args );

			self::$iterator++;
		}
    }

	/**
	 * Widgets (array).
	 *
	 * Numerically indexed array of Pre-configured widgets to
	 * display in every instance of a Jigoshop Monster widget. Each entry
	 * requires two values:
	 *
	 * 0 - The name of the widget's class as registered with register_widget().
	 * 1 - An associative array representing an instance of the widget.
	 *
	 *
	 * This list can be altered by using the `jigoshop-monster-widget-config` filter.
	 *
	 * @return array Widget configuration.
	 * @since 0.1
	 */
	public function get_widget_config() {
		$widgets = array(

			array( 'Jigoshop_Widget_Best_Sellers', array(
				'title'    => __( 'Best Sellers', 'jigoshop-monster-widget' ),
				'number'    => 1,
			) ),
			
			array( 'Jigoshop_Widget_Cart', array(
				'title' => __( 'Shopping Cart', 'jigoshop-monster-widget' ),
				'view_cart_button' => __( 'View Cart &rarr;', 'jigoshop-monster-widget' ),
				'checkout_button' => __( 'Checkout &rarr;', 'jigoshop-monster-widget' ),
			) ),

			array( 'Jigoshop_Widget_Featured_Products', array(
				'title' => __( 'Featured Products', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),

			array( 'Jigoshop_Widget_User_Login', array(
				'title_user' => __( 'Hey %s!', 'jigoshop-monster-widget' ),
				'title_guest' => __( 'Login', 'jigoshop-monster-widget' ),
			) ),

			array( 'Jigoshop_Widget_Recent_Products', array(
				'title' => __( 'New Products', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),

			array( 'Jigoshop_Widget_Price_Filter', array(
				'title' => __( 'Filter by Price', 'jigoshop-monster-widget' ),
			) ),

			array( 'Jigoshop_Widget_Product_Categories', array(
				'title' => __( 'Product Categories', 'jigoshop-monster-widget' ),
				'count' => 1,
				'hierarchical' => 0,
				'dropdown' => 0,
			) ),			

			array( 'Jigoshop_Widget_Product_Categories', array(
				'title' => __( 'Product Categories', 'jigoshop-monster-widget' ),
				'count' => 0,
				'hierarchical' => 1,
				'dropdown' => 1,
			) ),

			array( 'Jigoshop_Widget_Product_Search', array(
				'title' => __( 'Product Search', 'jigoshop-monster-widget' ),
			) ),		

			array( 'Jigoshop_Widget_Products_On_Sale', array(
				'title' => __( 'Special Offers', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),

			array( 'Jigoshop_Widget_Tag_Cloud', array(
				'title' => __( 'Product Tags', 'jigoshop-monster-widget' ),
			) ),

			array( 'Jigoshop_Widget_Random_Products', array(
				'title' => __( 'Random Products', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),			

			array( 'Jigoshop_Widget_Recently_Viewed_Products', array(
				'title' => __( 'Recently Viewed Products', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),	

			array( 'Jigoshop_Widget_Recent_Reviews', array(
				'title' => __( 'Recent Reviews', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),

			array( 'Jigoshop_Widget_Top_Rated', array(
				'title' => __( 'Top Rated Products', 'jigoshop-monster-widget' ),
				'number' => 5,
			) ),			

		);
		return apply_filters( 'jigoshop-monster-widget-config', $widgets );
	}

	/**
	 * Get the html class attribute value for a given widget.
	 *
	 * @uses $wp_widget_factory
	 *
	 * @param string $widget The name of a registered widget class.
	 * @return string Dynamic class name a given widget.
	 *
	 * @since 0.1
	 */
	public function get_widget_class( $widget ) {
		global $wp_widget_factory;

		$widget_obj = '';
		if ( isset( $wp_widget_factory->widgets[$widget] ) )
			$widget_obj = $wp_widget_factory->widgets[$widget];

		if ( ! is_a( $widget_obj, 'WP_Widget') )
			return '';

		if ( ! isset( $widget_obj->widget_options['classname'] ) )
			return '';

		return $widget_obj->widget_options['classname'];
	}

}